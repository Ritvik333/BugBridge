stages:
  - compile
  - validate
  - release
  - rollout

backend-build:
  stage: compile
  tags:
    - bugboard-runner
  image: maven:latest
  script:
    - cd backend && mvn clean package && ls -lh target/
  artifacts:
    paths:
      - backend/target/*.jar

frontend-build:
  stage: compile
  tags:
    - bugboard-runner
  image: node:18-alpine
  script:
    - |
      cd frontend
      npm install
      echo "Base URL:$BASE_URL"
      export BACKEND_BASE_URL=$BASE_URL
      echo "Backend Base URL: $BACKEND_BASE_URL"
      export CI=false
      npm run build
  artifacts:
    paths:
      - frontend/build

backend-publish:
  image: docker:latest
  stage: release
  tags:
    - bugboard-runner
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: "tcp://docker:2375"
  services:
    - docker:dind
  script:
    - cd backend && pwd && ls
    - echo "Server IP:$SERVER_IP"
    - docker --version
    - echo "$DOCKER_HUB_PWD" | docker login -u "$DOCKER_HUB_USER" --password-stdin
    - IMAGE_TAG="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    - docker build -t dharmakevadiya/backend-api:$IMAGE_TAG . -f Dockerfile
    - docker push dharmakevadiya/backend-api:$IMAGE_TAG
  only:
    - develop
    - main

frontend-publish:
  image: docker:latest
  stage: release
  tags:
    - bugboard-runner
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: "tcp://docker:2375"
  services:
    - docker:dind
  script:
    - cd frontend && pwd && ls
    - echo "Server IP:$SERVER_IP"
    - docker --version
    - echo "$DOCKER_HUB_PWD" | docker login -u "$DOCKER_HUB_USER" --password-stdin
    - IMAGE_TAG="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    - docker build --build-arg BACKEND_BASE_URL=$BASE_URL -t dharmakevadiya/frontend:$IMAGE_TAG . -f Dockerfile
    - docker push dharmakevadiya/frontend:$IMAGE_TAG
  only:
    - develop
    - main

backend-deploy:
  image: alpine:latest
  stage: rollout
  tags:
    - bugboard-runner
  before_script:
    - apk update && apk add openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$ID_RSA" | base64 -d > ~/.ssh/id_ed25519 && chmod 600 ~/.ssh/id_ed25519
    - ssh-add ~/.ssh/id_ed25519
  script:
    - IMAGE_TAG="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    - CONTAINER_NAME="bugboard-${CI_COMMIT_REF_NAME}-app"
    - SERVER_PORT=$( [ "$CI_COMMIT_REF_NAME" == "develop" ] && echo "8080" || echo "8073" )
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD docker.io"
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull dharmakevadiya/backend-api:$IMAGE_TAG"
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f $CONTAINER_NAME || true"
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p $SERVER_PORT:$SERVER_PORT --name $CONTAINER_NAME --restart=always dharmakevadiya/backend-api:$IMAGE_TAG"
  environment:
    name: development
    url: http://$SERVER_IP:$SERVER_PORT
  only:
    - develop
    - main

frontend-deploy:
  image: alpine:latest
  stage: rollout
  tags:
    - bugboard-runner
  before_script:
    - apk update && apk add openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$ID_RSA" | base64 -d > ~/.ssh/id_ed25519 && chmod 600 ~/.ssh/id_ed25519
    - ssh-add ~/.ssh/id_ed25519
  script:
    - IMAGE_TAG="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    - CONTAINER_NAME="bugboard-${CI_COMMIT_REF_NAME}-frontend"
    - SERVER_PORT=$( [ "$CI_COMMIT_REF_NAME" == "develop" ] && echo "3000" || echo "3080" )
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD docker.io"
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull dharmakevadiya/frontend:$IMAGE_TAG"
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f $CONTAINER_NAME || true"
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p $SERVER_PORT:$SERVER_PORT --name $CONTAINER_NAME --restart=always dharmakevadiya/frontend:$IMAGE_TAG"
  environment:
    name: development
    url: http://$SERVER_IP:$SERVER_PORT
  only:
    - develop
    - main